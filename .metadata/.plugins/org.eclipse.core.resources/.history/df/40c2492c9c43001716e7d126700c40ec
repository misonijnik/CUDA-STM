#include <stdio.h>
#include <cuda_runtime.h>
#include <device_launch_parameters.h>

#ifndef CUDAHELPER
#define CUDAHELPER

#define uniqueIndex() blockIdx.x* blockDim.x + threadIdx.x

#define cudaCheckError() {\
	cudaError_t e = cudaGetLastError(); \
	if (e != cudaSuccess) {\
		printf("Cuda failure %s:%d: '%s'\n", __FILE__, __LINE__, cudaGetErrorString(e));\
		getchar();\
		exit(0); }}

template<typename T>
class CUDASet
{
private:
	size_t realCount;
	size_t Count;
	T cudaPtr[10];

public:	
	__device__ CUDASet()
	{
		Count = 0;
		realCount = 10;
	}

	__device__ size_t getCount()
	{
		return Count;
	}

	__device__ void Add(T value)
	{
		if (Count == realCount)
		{
			printf("size error, thread %u", uniqueIndex());
		}

		cudaPtr[Count] = value;
		++Count;
	}

	__device__ T* getByIndex(unsigned int index)
	{
		if (index >= Count)
		{
			printf("out of range error, thread %u", uniqueIndex());
			return NULL;
		}
		return (cudaPtr + index);
	}

	//
	__device__ void getByIndex(unsigned int index, T* valuePtr)
	{
		if (index >= Count)
		{
			printf("out of range error, thread %u", uniqueIndex());
		}
		memcpy(valuePtr, cudaPtr + index, sizeof(T));
	}
	//

	__device__  ~CUDASet()
	{
	}
};

template<typename T>
class CUDAArray
{
private:
	bool isDisposed = false;
public:
	T* cudaPtr;
	size_t Length;

	CUDAArray()
	{
		Length = 0;
		cudaPtr = 0;
		isDisposed = false;
	}

	__host__ __device__ CUDAArray(const CUDAArray& arr)
	{
		cudaPtr = arr.cudaPtr;
		Length = arr.Length;
		isDisposed = false;
	}

	__host__ CUDAArray(T* cpuPtr, unsigned int length)
	{
		Length = length;
		cudaMalloc((void**)&cudaPtr, length*sizeof(T));
		cudaMemcpy(cudaPtr, cpuPtr, length*sizeof(T), cudaMemcpyHostToDevice);
		cudaDeviceSynchronize();
		isDisposed = false;
	}

	__host__ CUDAArray(int length)
	{
		Length = length;
		cudaError_t error = cudaMalloc((void**)&cudaPtr, length*sizeof(T));
		error = cudaDeviceSynchronize();
		cudaMemset(cudaPtr, 0, length*sizeof(T));
		cudaCheckError();
		isDisposed = false;
	}

	__host__ T* GetData()
	{
		T* arr = (T*)malloc(sizeof(T)*Length);
		GetData(arr);
		return arr;
	}

	__host__ void GetData(T* arr)
	{
		cudaError_t error = cudaMemcpy(arr, cudaPtr, Length*sizeof(T), cudaMemcpyDeviceToHost);
		error = cudaDeviceSynchronize();

	}

	__device__ T At(int index)
	{
		return cudaPtr[index];
	}

	__device__ T* AtPtr(int index)
	{
		return &(cudaPtr[index]);
	}

	__device__ void SetAt(int index, T value)
	{
		cudaPtr[index] = value;
	}

	__host__ void Dispose()
	{
		cudaFree(cudaPtr);
	}

	__host__ ~CUDAArray()
	{
	}
};

template class CUDAArray<int>;

template class CUDAArray<float>;

#endif


